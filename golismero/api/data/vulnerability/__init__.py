#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Vulnerability types.
"""

__license__ = """
GoLismero 2.0 - The web knife - Copyright (C) 2011-2013

Authors:
  Daniel Garcia Garcia a.k.a cr0hn | cr0hn<@>cr0hn.com
  Mario Vilas | mvilas<@>gmail.com

Golismero project site: https://github.com/golismero
Golismero project mail: golismero.project<@>gmail.com

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

__all__ = ["Vulnerability", "UrlVulnerability"]

from .vuln_utils import convert_vuln_ids_to_references, \
     convert_references_to_vuln_ids
from .. import Data, identity, merge, keep_newer, keep_true, LocalDataCache
from ..resource.url import BaseUrl, FolderUrl, Url
from ...config import Config
from ...plugin import get_plugin_info

from collections import defaultdict
from inspect import getmro
from textwrap import dedent
from warnings import warn


#------------------------------------------------------------------------------
class Vulnerability(Data):
    """
    Base class for all vulnerabilities.
    """

    data_type = Data.TYPE_VULNERABILITY
    vulnerability_type = "abstract"
    max_vulnerabilities = 0


    VULN_LEVELS = ("informational", "low", "middle", "high", "critical")

    TAXONOMY_NAMES = {
        "bid":      "Bugtraq ID",
        "ca":       "CERT Advisory",
        "capec":    "CAPEC ID",
        "cve":      "CVE ID",
        "cwe":      "CWE ID",
        "osvdb":    "OSVDB ID",
        "sa":       "Secunia Advisory",
        "sectrack": "Security Tracker ID",
        "vu":       "CERT Vulnerability Note",
        "xf":       "ISS X-Force ID",
    }

    # Default vulnerability properties.
    DEFAULTS = {
        "level":            "low",
        "title":            None,  # special value, do not change!
        "description":      None,  # special value, do not change!
        "solution":         None,  # special value, do not change!
        "impact":           0,
        "cvss_base":        0,
        "cvss_base_vector": "",
        "severity":         0,
        "risk":             0,
        "bid":              (),
        "ca":               (),
        "capec":            (),
        "cve":              (),
        "cwe":              (),
        "osvdb":            (),
        "sa":               (),
        "sectrack":         (),
        "vu":               (),
        "xf":               (),
        "references":       (),
        "tool_id":          None,
    }


    #--------------------------------------------------------------------------
    def __init__(self, **kwargs):
        """
        :param level: User-friendly vulnerability level.
            Must be one of the following values: "critical", "high", "middle",
            "low" or "informational".
        :type level: str

        :param title: Title used for vulnerability.
        :type title: str

        :param description: Free form text describing the vulnerability.
        :type description: str

        :param solution: Free form text describing a possible solution.
        :type solution: str

        :param plugin_id: ID of the plugin that found the vulnerability.
            Defaults to the calling plugin ID.
        :type plugin_id: str

        :param tool_id: Plugin-defined tool ID. This may be used by plugins
            that run external tools, to track down which tool (or which
            plugin/addon of that tool) has found the vulnerability. Other
            plugins can safely leave this as None (the default).
        :type tool_id: str | None

        :param custom_id: Customized vulnerability ID. This advanced argument
            may be used by plugins that know how to uniquely identify their
            own vulnerabilities, in order to detect when the same vulnerability
            was detected multiple times. Most plugins will leave this value as
            None and let GoLismero do the vulnerability duplicates matching.
        :type custom_id: str | None

        :param cvss_base: A float indication the CVSS base value.
        :type cvss_base: float

        :param cvss_base_vector: A string indicating the CVSS base vector.
            The expected format is: 'AV:N/AC:L/Au:N/C:N/I:N/A:P'
        :type cvss_base_vector: str

        :param bid: Bugtraq IDs.
        :type bid: tuple( str, ... )

        :param ca: CERT Advisory IDs.
        :type ca: tuple( str, ... )

        :param capec: CAPEC IDs.
        :type capec: tuple( str, ... )

        :param cve: CVE IDs.
        :type cve: tuple( str, ... )

        :param cwe: CVE IDs.
        :type cwe: tuple( str, ... )

        :param osvdb: OSVDB IDs.
        :type osvdb: tuple( str, ... )

        :param sa: Secunia Advisory IDs.
        :type sa: tuple( str, ... )

        :param sectrack: Security Tracker IDs.
        :type sectrack: tuple( str, ... )

        :param xf: ISS X-Force IDs.
        :type xf: tuple( str, ... )

        :param impact: Impact rating. A number between 0-4.
        :type impact: int

        :param severity: Severity rating. A number between 0-4.
        :type severity: int

        :param risk: Risk rating. A number between 0-4.
        :type risk: int

        :param references: Reference URLs.
        :type references: tuple(str)
        """

        # Do not allow abstract vulnerability types to be instanced.
        if self.vulnerability_type == "abstract":
            raise TypeError("Class %s is abstract!" % self.__class__.__name__)

        # Store the custom ID, if any.
        custom_id = kwargs.pop("custom_id", None)
        if custom_id is not None and type(custom_id) is not str:
            raise TypeError("Custom ID may only be a string!")
        self.__custom_id = custom_id

        # Newly found vulns are undecided by default.
        # However, if previously marked as false positives and found again,
        # the false positive mark stays put (@keep_true strategy).
        self.__false_positive = None

        # Set the plugin ID. We need to do this before setting the rest of the
        # properties, because some of them use the plugin ID, like for example
        # the vulnerability title.
        self.plugin_id = kwargs.pop("plugin_id", None)

        # Validate the remaining keyword arguments.
        not_found = set(kwargs.iterkeys())
        not_found.difference_update(Vulnerability.DEFAULTS.iterkeys())
        if not_found:
            raise TypeError(
                "Unexpected keyword arguments: %s"
                % ", ".join(sorted(not_found)))
        del not_found

        # Set the properties, first the ones with a default value defined,
        # then the ones with no default value defined.
        propnames = [
            k for k,v in Vulnerability.DEFAULTS.iteritems() if v is not None]
        propnames.extend(
            k for k,v in Vulnerability.DEFAULTS.iteritems() if v is None)
        for prop in propnames:
            value = kwargs.get(prop)
            if value is None:
                value = self.DEFAULTS.get(prop)
                if value is None:
                    value = Vulnerability.DEFAULTS.get(prop)
            setattr(self, prop, value)

        # Feed back references to vulnerability IDs.
        vuln_ids = convert_references_to_vuln_ids(self.references)
        for key, value in vuln_ids.iteritems():
            value.extend(getattr(self, key, []))
            setattr(self, key, value) # auto-sanitizes

        # Feed back vulnerability IDs to references.
        refs = convert_vuln_ids_to_references(self.taxonomies)
        refs.extend(self.references)
        self.references = refs # auto-sanitizes

        # Call the parent constructor.
        super(Vulnerability, self).__init__()


    #--------------------------------------------------------------------------
    def __repr__(self):
        return "<%s plugin_id=%r level=%r title=%r>" % (
            self.__class__.__name__,
            self.plugin_id,
            self.level,
            self.title,
        )


    #--------------------------------------------------------------------------
    @staticmethod
    def __sanitize_vuln_ids(vid):
        if vid:
            if isinstance(vid, basestring):
                return (str(vid),)
            else:
                return tuple(sorted(set(vid)))
        else:
            return ()


    #--------------------------------------------------------------------------
    def __get_default_text(self, propname):
        text = self.DEFAULTS.get(propname, None)
        if text is None:
            if propname == "title":
                if self.level == "informational":
                    text = "User attention required by"
                else:
                    text = "A vulnerability has been found by"
                if not self.plugin_id or self.plugin_id.lower() == "golismero":
                    text += " GoLismero"
                elif self.plugin_id.startswith("ui/"):
                    text += " the user"
                else:
                    text += ": "
                    try:
                        text += get_plugin_info(self.plugin_id).display_name
                    except Exception:
                        text += self.plugin_id
            elif propname == "description":
                mro = [
                    clazz for clazz in getmro(self.__class__)
                    if hasattr(clazz, "vulnerability_type") and
                       clazz.vulnerability_type not in ("abstract", "generic")
                ]
                for clazz in mro:
                    text = getattr(clazz, "__doc__", None)
                    if text:
                        break
                if text:
                    text = dedent(text).strip()
                    text = text.split("\n\n", 1)[0].strip()
                    text = text.replace("\t", "    ")
                    text = text.replace("\n", " ")
                if not text:
                    if self.references:
                        if len(self.references) > 1:
                            text = ("Please visit the reference website"
                                    " for more information")
                        else:
                            text = ("Please visit the reference websites"
                                    " for more information")
                        if self.level == "informational":
                            text += "."
                        else:
                            text += " on this vulnerability."
                    else:
                        text = "No additional details are available"
                        if self.level == "informational":
                            text += "."
                        else:
                            text += " for this vulnerability."
            elif propname == "solution":
                if self.references:
                    if len(self.references) > 1:
                        text = ("Please visit the reference websites"
                                " for more information")
                    else:
                        text = ("Please visit the reference website"
                                " for more information")
                else:
                    text = "No additional details are available"
                if self.level == "informational":
                    text += "."
                else:
                    text += " on how to patch this vulnerability."
            else:
                text = ""
        return text


    #--------------------------------------------------------------------------
    @identity
    def custom_id(self):
        """
        :returns: Customized vulnerability ID. This advanced argument may be
            used by plugins that know how to uniquely identify their own
            vulnerabilities, in order to detect when the same vulnerability was
            detected multiple times. Most plugins will leave this value as None
            and let GoLismero do the vulnerability duplicates matching.
        :rtype: str | None
        """
        return self.__custom_id


    #--------------------------------------------------------------------------
    @keep_true
    def false_positive(self):
        """
        :returns: True for false positives, False for real vulnerabilities.
            None means the user hasn't evaluated this vulnerability yet.
        :rtype: bool | None
        """
        return self.__false_positive


    #--------------------------------------------------------------------------
    @false_positive.setter
    def false_positive(self, false_positive):
        """
        :param false_positive:
            True for false positives, False for real vulnerabilities.

            Don't use None here, it will be interpreted as False! Once a
            vulnerability has been marked as false positive or not, you
            can't go back to the undecided state.

        :type false_positive: bool
        """
        self.__false_positive = bool(false_positive)


    #--------------------------------------------------------------------------
    @keep_newer
    def plugin_id(self):
        """
        :returns: ID of the plugin that found the vulnerability.
        :rtype: str
        """
        return self.__plugin_id


    #--------------------------------------------------------------------------
    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """
        :param plugin_id: ID of the plugin that found the vulnerability.
            Defaults to the calling plugin ID.
        :type plugin_id: str
        """
        if not plugin_id:
            try:
                plugin_id = Config.plugin_id
            except Exception:
                plugin_id = "GoLismero"
        elif not isinstance(plugin_id, str):
            raise TypeError(
                "Expected string, got %r instead" % type(plugin_id))
        self.__plugin_id = plugin_id


    #--------------------------------------------------------------------------
    @keep_newer
    def tool_id(self):
        """
        :returns: Plugin-defined tool ID. This may be used by plugins
            that run external tools, to track down which tool (or which
            plugin/addon of that tool) has found the vulnerability. Other
            plugins can safely leave this as None (the default).
        :rtype: str | None
        """
        return self.__tool_id


    #--------------------------------------------------------------------------
    @tool_id.setter
    def tool_id(self, tool_id):
        """
        :param tool_id: Plugin-defined tool ID. This may be used by plugins
            that run external tools, to track down which tool (or which
            plugin/addon of that tool) has found the vulnerability. Other
            plugins can safely leave this as None (the default).
        :type tool_id: str | None
        """
        if not tool_id:
            tool_id = None
        elif not isinstance(tool_id, str):
            raise TypeError("Expected string, got %r instead" % type(tool_id))
        self.__tool_id = tool_id


    #--------------------------------------------------------------------------
    @keep_newer
    def level(self):
        """
        :return: Vulnerability level.
        :rtype: str
        """
        return self.__level


    #--------------------------------------------------------------------------
    @level.setter
    def level(self, level):
        """
        :param level: User-friendly vulnerability level.
        :type level: str
        """
        if not isinstance(level, str):
            raise TypeError("Expected str, got %r instead" % type(level))
        elif level.lower() not in self.VULN_LEVELS:
            raise ValueError("Unknown level: %r" % level)

        self.__level = level.lower()


    #--------------------------------------------------------------------------
    @keep_newer
    def impact(self):
        """
        :returns: Impact rating.
        :rtype: int
        """
        return self.__impact


    #--------------------------------------------------------------------------
    @impact.setter
    def impact(self, impact):
        """
        :param impact: Impact rating.
        :type impact: int
        """
        impact = int(impact)
        if impact < 0 or impact > 4:
            raise ValueError("Invalid impact value: %d" % impact)

        self.__impact = impact


    #--------------------------------------------------------------------------
    @merge
    def bid(self):
        """
        :returns: Bugtraq IDs.
        :rtype: tuple( str, ... )
        """
        return self.__bid


    #--------------------------------------------------------------------------
    @bid.setter
    def bid(self, bid):
        """
        :param bid: Bugtraq IDs.
        :type bid: tuple( str, ... )
        """
        self.__bid = self.__sanitize_vuln_ids(bid)


    #--------------------------------------------------------------------------
    @merge
    def ca(self):
        """
        :returns: CERT Advisory IDs.
        :rtype: tuple( str, ... )
        """
        return self.__ca


    #--------------------------------------------------------------------------
    @ca.setter
    def ca(self, ca):
        """
        :param ca: CERT Advisory IDs.
        :type ca: tuple( str, ... )
        """
        self.__ca = self.__sanitize_vuln_ids(ca)


    #--------------------------------------------------------------------------
    @merge
    def capec(self):
        """
        :returns: CAPEC IDs.
        :rtype: tuple( str, ... )
        """
        return self.__capec


    #--------------------------------------------------------------------------
    @capec.setter
    def capec(self, capec):
        """
        :param capec: CAPEC IDs.
        :type capec: tuple( str, ... )
        """
        self.__capec = self.__sanitize_vuln_ids(capec)


    #--------------------------------------------------------------------------
    @merge
    def cve(self):
        """
        :returns: CVE IDs.
        :rtype: tuple( str, ... )
        """
        return self.__cve


    #--------------------------------------------------------------------------
    @cve.setter
    def cve(self, cve):
        """
        :param cve: CVE IDs.
        :type cve: tuple( str, ... )
        """
        self.__cve = self.__sanitize_vuln_ids(cve)


    #--------------------------------------------------------------------------
    @merge
    def cwe(self):
        """
        :returns: CWE IDs.
        :rtype: tuple( str, ... )
        """
        return self.__cwe


    #--------------------------------------------------------------------------
    @cwe.setter
    def cwe(self, cwe):
        """
        :param cwe: CWE IDs.
        :type cwe: tuple( str, ... )
        """
        self.__cwe = self.__sanitize_vuln_ids(cwe)


    #--------------------------------------------------------------------------
    @merge
    def osvdb(self):
        """
        :returns: OSVDB IDs.
        :rtype: tuple( str, ... )
        """
        return self.__osvdb


    #--------------------------------------------------------------------------
    @osvdb.setter
    def osvdb(self, osvdb):
        """
        :param osvdb: OSVDB IDs.
        :type osvdb: tuple( str, ... )
        """
        self.__osvdb = self.__sanitize_vuln_ids(osvdb)


    #--------------------------------------------------------------------------
    @merge
    def sa(self):
        """
        :returns: Secunia Advisory IDs.
        :rtype: tuple( str, ... )
        """
        return self.__sa


    #--------------------------------------------------------------------------
    @sa.setter
    def sa(self, sa):
        """
        :param sa: Secunia Advisory IDs.
        :type sa: tuple( str, ... )
        """
        self.__sa = self.__sanitize_vuln_ids(sa)


    #--------------------------------------------------------------------------
    @merge
    def sectrack(self):
        """
        :returns: Security Tracker IDs.
        :rtype: tuple( str, ... )
        """
        return self.__sectrack


    #--------------------------------------------------------------------------
    @sectrack.setter
    def sectrack(self, sectrack):
        """
        :param sectrack: Security Tracker IDs.
        :type sectrack: tuple( str, ... )
        """
        self.__sectrack = self.__sanitize_vuln_ids(sectrack)


    #--------------------------------------------------------------------------
    @merge
    def vu(self):
        """
        :returns: Vulnerability Note IDs.
        :rtype: tuple( str, ... )
        """
        return self.__vu


    #--------------------------------------------------------------------------
    @vu.setter
    def vu(self, vu):
        """
        :param vu: Vulnerability Note IDs.
        :type vu: tuple( str, ... )
        """
        self.__vu = self.__sanitize_vuln_ids(vu)


    #--------------------------------------------------------------------------
    @merge
    def xf(self):
        """
        :returns: ISS X-Force IDs.
        :rtype: tuple( str, ... )
        """
        return self.__xf


    #--------------------------------------------------------------------------
    @xf.setter
    def xf(self, xf):
        """
        :param xf: ISS X-Force IDs.
        :type xf: tuple( str, ... )
        """
        self.__xf = self.__sanitize_vuln_ids(xf)


    #--------------------------------------------------------------------------
    @keep_newer
    def severity(self):
        """
        :returns: Severity rating.
        :rtype: int
        """
        return self.__severity


    #--------------------------------------------------------------------------
    @severity.setter
    def severity(self, severity):
        """
        :param severity: Severity rating.
        :type severity: int
        """
        severity = int(severity)
        if severity < 0 or severity > 4:
            raise ValueError("Invalid severity value: %d" % severity)

        self.__severity = severity


    #--------------------------------------------------------------------------
    @keep_newer
    def risk(self):
        """
        :returns: Risk rating.
        :rtype: int
        """
        return self.__risk


    #--------------------------------------------------------------------------
    @risk.setter
    def risk(self, risk):
        """
        :param risk: Risk rating.
        :type risk: int
        """
        risk = int(risk)
        if risk < 0 or risk > 4:
            raise ValueError("Invalid severity value: %d" % risk)

        self.__risk = risk

    #--------------------------------------------------------------------------
    @keep_newer
    def cvss_base(self):
        """
        :returns: CVSS base value.
        :rtype: float
        """
        return self.__cvss_base


    #--------------------------------------------------------------------------
    @cvss_base.setter
    def cvss_base(self, cvss_base):
        """
        :param cvss_base: CVSS base value.
        :type cvss_base: float
        """
        cvss_base = float(cvss_base)
        if cvss_base < 0.0 or cvss_base > 10.0:
            raise ValueError("Invalid CVSS base value: %d" % cvss_base)

        self.__cvss_base = cvss_base

    #--------------------------------------------------------------------------
    @keep_newer
    def cvss_base_vector(self):
        """
        :returns: A string indicating the CVSS base vector.
            The expected format is: 'AV:N/AC:L/Au:N/C:N/I:N/A:P'
        :rtype: str
        """
        return self.__cvss_base_vector


    #--------------------------------------------------------------------------
    @cvss_base_vector.setter
    def cvss_base_vector(self, cvss_base_vector):
        """
        :param cvss_base_vector: A string indicating the CVSS base vector.
            The expected format is: 'AV:N/AC:L/Au:N/C:N/I:N/A:P'
        :type cvss_base_vector: str
        """
        if not cvss_base_vector:
            cvss_base_vector = ""
        self.__cvss_base_vector = cvss_base_vector


    #--------------------------------------------------------------------------
    @keep_newer
    def title(self):
        """
        :returns: Title of the vulnerability.
        :rtype: str
        """
        return self.__title


    #--------------------------------------------------------------------------
    @title.setter
    def title(self, title):
        """
        :param title: Title of the vulnerability.
            Use None to set the default.
        :type title: str
        """
        if title is None:
            title = self.__get_default_text("title")
        self.__title = title


    #--------------------------------------------------------------------------
    @keep_newer
    def description(self):
        """
        :returns: Free form text describing the vulnerability.
        :rtype: str
        """
        return self.__description


    #--------------------------------------------------------------------------
    @description.setter
    def description(self, description):
        """
        :param description: Free form text describing the vulnerability.
            Use None to set the default.
        :type description: str
        """
        if description is None:
            description = self.__get_default_text("description")
        self.__description = description


    #--------------------------------------------------------------------------
    @keep_newer
    def solution(self):
        """
        :returns: Free form text describing a possible solution.
            Use None to set the default.
        :rtype: str
        """
        return self.__solution


    #--------------------------------------------------------------------------
    @solution.setter
    def solution(self, solution):
        """
        :param solution: Free form text describing a possible solution.
        :type solution: str
        """
        if solution is None:
            solution = self.__get_default_text("solution")
        self.__solution = solution


    #--------------------------------------------------------------------------
    @keep_newer
    def references(self):
        """
        :returns: Reference URLs.
        :rtype: tuple(str)
        """
        return self.__references


    #--------------------------------------------------------------------------
    @references.setter
    def references(self, references):
        """
        :param references: Reference URLs.
        :type references: tuple(str)
        """

        # Remove the duplicates and convert to list.
        if not references:
            references = []
        elif isinstance(references, basestring):
            references = [references]
        else:
            references = list(set(references))

        # Remove the redundant references and sort the list.
        if references:
            tmp = defaultdict(list)
            for ref in references:
                tmp2 = convert_references_to_vuln_ids([ref])
                for vuln_ids in tmp2.itervalues():
                    for vid in vuln_ids:
                        tmp[vid].append(ref)
            for vid, refs in tmp.iteritems():
                for ref in refs:
                    references.remove(ref)
                tmp3 = convert_vuln_ids_to_references([vid])
                references.append( tmp3[0] )
            references.sort()

        # Save the references as a tuple.
        self.__references = tuple(references)


    #--------------------------------------------------------------------------
    @property
    def taxonomies(self):
        """
        This alias concatenates all vulnerability IDs for all supported
        taxonomies into a single list.

        :returns: All vulnerability IDs for all taxonomies.
        :rtype: list(str)
        """
        result = []
        for vuln_type in self.TAXONOMY_NAMES:
            result.extend( getattr(self, vuln_type) )
        return result


#------------------------------------------------------------------------------
class UncategorizedVulnerability(Vulnerability):
    """
    Generic vulnerability.

    This is useful for plugins that for some reason can't categorize the
    vulnerabilities they find. Avoid using it whenever possible!
    """

    vulnerability_type = "generic"


#------------------------------------------------------------------------------
class UrlVulnerability(Vulnerability):
    """
    Base class for all vulnerabilities associated with a single URL.
    """

    vulnerability_type = "abstract"

    min_resources = 1
    max_resources = 1
    max_informations = 0


    #--------------------------------------------------------------------------
    def __init__(self, url, **kwargs):
        """
        :param url: URL where the vulnerability was found.
        :type url: Url

        """

        # Sanitize the "url" argument.
        if not isinstance(url, Url) and not isinstance(url, FolderUrl) and not isinstance(url, BaseUrl):
            if isinstance(url, basestring):
                msg = "You should pass an Url object to %s instead of a string!"
                msg %= self.__class__.__name__
                url = Url(str(url))
                LocalDataCache.on_autogeneration(url)
            elif hasattr(url, "url"):
                try:
                    t = url.__class__.__name__
                except Exception:
                    t = str(type(url))
                msg = "You should pass an Url object to %s instead of %s!"
                msg %= (self.__class__.__name__, t)
                url = url.url
                if isinstance(url, basestring):
                    url = Url(str(url))
                    LocalDataCache.on_autogeneration(url)
                elif not isinstance(url, Url):
                    raise TypeError("Expected Url, got %r instead" % t)
            warn(msg, RuntimeWarning, stacklevel=2)

        # Save the raw URL.
        self.__url = url.url

        # Parent constructor. Must be called before adding associations!
        super(UrlVulnerability, self).__init__(**kwargs)

        # Add the reference to the URL where the vulnerability was found.
        self.add_resource(url)

    __init__.__doc__ += Vulnerability.__init__.__doc__


    #--------------------------------------------------------------------------
    def __str__(self):
        return self.url


    #--------------------------------------------------------------------------
    def __repr__(self):
        return "<%s url=%r plugin_id=%r level=%r desc=%r>" % (
            self.__class__.__name__,
            self.url,
            self.plugin_id,
            self.level,
            self.description,
        )


    #--------------------------------------------------------------------------
    @identity
    def url(self):
        """
        :return: Raw URL where the vulnerability was found.
        :rtype: str
        """
        return self.__url
